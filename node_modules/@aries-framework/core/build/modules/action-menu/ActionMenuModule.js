"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ActionMenuModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionMenuModule = void 0;
const Dispatcher_1 = require("../../agent/Dispatcher");
const MessageSender_1 = require("../../agent/MessageSender");
const helpers_1 = require("../../agent/helpers");
const error_1 = require("../../error");
const plugins_1 = require("../../plugins");
const services_1 = require("../connections/services");
const ActionMenuRole_1 = require("./ActionMenuRole");
const handlers_1 = require("./handlers");
const services_2 = require("./services");
let ActionMenuModule = ActionMenuModule_1 = class ActionMenuModule {
    constructor(dispatcher, connectionService, messageSender, actionMenuService) {
        this.connectionService = connectionService;
        this.messageSender = messageSender;
        this.actionMenuService = actionMenuService;
        this.registerHandlers(dispatcher);
    }
    /**
     * Start Action Menu protocol as requester, asking for root menu. Any active menu will be cleared.
     *
     * @param options options for requesting menu
     * @returns Action Menu record associated to this new request
     */
    async requestMenu(options) {
        const connection = await this.connectionService.getById(options.connectionId);
        const { message, record } = await this.actionMenuService.createRequest({
            connection,
        });
        const outboundMessage = helpers_1.createOutboundMessage(connection, message);
        await this.messageSender.sendMessage(outboundMessage);
        return record;
    }
    /**
     * Send a new Action Menu as responder. This menu will be sent as response if there is an
     * existing menu thread.
     *
     * @param options options for sending menu
     * @returns Action Menu record associated to this action
     */
    async sendMenu(options) {
        const connection = await this.connectionService.getById(options.connectionId);
        const { message, record } = await this.actionMenuService.createMenu({
            connection,
            menu: options.menu,
        });
        const outboundMessage = helpers_1.createOutboundMessage(connection, message);
        await this.messageSender.sendMessage(outboundMessage);
        return record;
    }
    /**
     * Perform action in active Action Menu, as a requester. The related
     * menu will be closed.
     *
     * @param options options for requesting menu
     * @returns Action Menu record associated to this selection
     */
    async performAction(options) {
        const connection = await this.connectionService.getById(options.connectionId);
        const actionMenuRecord = await this.actionMenuService.find({
            connectionId: connection.id,
            role: ActionMenuRole_1.ActionMenuRole.Requester,
        });
        if (!actionMenuRecord) {
            throw new error_1.AriesFrameworkError(`No active menu found for connection id ${options.connectionId}`);
        }
        const { message, record } = await this.actionMenuService.createPerform({
            actionMenuRecord,
            performedAction: options.performedAction,
        });
        const outboundMessage = helpers_1.createOutboundMessage(connection, message);
        await this.messageSender.sendMessage(outboundMessage);
        return record;
    }
    /**
     * Find the current active menu for a given connection and the specified role.
     *
     * @param options options for requesting active menu
     * @returns Active Action Menu record, or null if no active menu found
     */
    async findActiveMenu(options) {
        return this.actionMenuService.find({
            connectionId: options.connectionId,
            role: options.role,
        });
    }
    /**
     * Clears the current active menu for a given connection and the specified role.
     *
     * @param options options for clearing active menu
     * @returns Active Action Menu record, or null if no active menu record found
     */
    async clearActiveMenu(options) {
        const actionMenuRecord = await this.actionMenuService.find({
            connectionId: options.connectionId,
            role: options.role,
        });
        return actionMenuRecord ? await this.actionMenuService.clearMenu({ actionMenuRecord }) : null;
    }
    registerHandlers(dispatcher) {
        dispatcher.registerHandler(new handlers_1.ActionMenuProblemReportHandler(this.actionMenuService));
        dispatcher.registerHandler(new handlers_1.MenuMessageHandler(this.actionMenuService));
        dispatcher.registerHandler(new handlers_1.MenuRequestMessageHandler(this.actionMenuService));
        dispatcher.registerHandler(new handlers_1.PerformMessageHandler(this.actionMenuService));
    }
    /**
     * Registers the dependencies of the discover features module on the dependency manager.
     */
    static register(dependencyManager) {
        // Api
        dependencyManager.registerContextScoped(ActionMenuModule_1);
        // Services
        dependencyManager.registerSingleton(services_2.ActionMenuService);
    }
};
ActionMenuModule = ActionMenuModule_1 = __decorate([
    plugins_1.module(),
    plugins_1.injectable(),
    __metadata("design:paramtypes", [Dispatcher_1.Dispatcher,
        services_1.ConnectionService,
        MessageSender_1.MessageSender,
        services_2.ActionMenuService])
], ActionMenuModule);
exports.ActionMenuModule = ActionMenuModule;
//# sourceMappingURL=ActionMenuModule.js.map