import type { InboundMessageContext } from '../../../agent/models/InboundMessageContext';
import type { Query } from '../../../storage/StorageService';
import type { ConnectionRecord } from '../../connections/repository/ConnectionRecord';
import { EventEmitter } from '../../../agent/EventEmitter';
import { BasicMessage } from '../messages';
import { BasicMessageRecord, BasicMessageRepository } from '../repository';
export declare class BasicMessageService {
    private basicMessageRepository;
    private eventEmitter;
    constructor(basicMessageRepository: BasicMessageRepository, eventEmitter: EventEmitter);
    createMessage(message: string, connectionRecord: ConnectionRecord): Promise<{
        message: BasicMessage;
        record: BasicMessageRecord;
    }>;
    /**
     * @todo use connection from message context
     */
    save({ message }: InboundMessageContext<BasicMessage>, connection: ConnectionRecord): Promise<void>;
    private emitStateChangedEvent;
    findAllByQuery(query: Query<BasicMessageRecord>): Promise<BasicMessageRecord[]>;
    getById(basicMessageRecordId: string): Promise<BasicMessageRecord>;
    deleteById(basicMessageRecordId: string): Promise<void>;
}
