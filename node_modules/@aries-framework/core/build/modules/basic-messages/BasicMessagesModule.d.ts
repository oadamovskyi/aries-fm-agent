import type { DependencyManager } from '../../plugins';
import type { Query } from '../../storage/StorageService';
import type { BasicMessageRecord } from './repository/BasicMessageRecord';
import { Dispatcher } from '../../agent/Dispatcher';
import { MessageSender } from '../../agent/MessageSender';
import { ConnectionService } from '../connections';
import { BasicMessageService } from './services';
export declare class BasicMessagesModule {
    private basicMessageService;
    private messageSender;
    private connectionService;
    constructor(dispatcher: Dispatcher, basicMessageService: BasicMessageService, messageSender: MessageSender, connectionService: ConnectionService);
    /**
     * Send a message to an active connection
     *
     * @param connectionId Connection Id
     * @param message Message contents
     * @throws {RecordNotFoundError} If connection is not found
     * @throws {MessageSendingError} If message is undeliverable
     * @returns the created record
     */
    sendMessage(connectionId: string, message: string): Promise<BasicMessageRecord>;
    /**
     * Retrieve all basic messages matching a given query
     *
     * @param query The query
     * @returns array containing all matching records
     */
    findAllByQuery(query: Query<BasicMessageRecord>): Promise<BasicMessageRecord[]>;
    /**
     * Retrieve a basic message record by id
     *
     * @param basicMessageRecordId The basic message record id
     * @throws {RecordNotFoundError} If no record is found
     * @return The basic message record
     *
     */
    getById(basicMessageRecordId: string): Promise<BasicMessageRecord>;
    /**
     * Delete a basic message record by id
     *
     * @param connectionId the basic message record id
     * @throws {RecordNotFoundError} If no record is found
     */
    deleteById(basicMessageRecordId: string): Promise<void>;
    private registerHandlers;
    /**
     * Registers the dependencies of the basic message module on the dependency manager.
     */
    static register(dependencyManager: DependencyManager): void;
}
