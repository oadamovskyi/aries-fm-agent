"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V2MessagePickupService = void 0;
const Dispatcher_1 = require("../../../../../agent/Dispatcher");
const helpers_1 = require("../../../../../agent/helpers");
const constants_1 = require("../../../../../constants");
const Attachment_1 = require("../../../../../decorators/attachment/Attachment");
const error_1 = require("../../../../../error");
const plugins_1 = require("../../../../../plugins");
const services_1 = require("../../../services");
const handlers_1 = require("./handlers");
const messages_1 = require("./messages");
let V2MessagePickupService = class V2MessagePickupService {
    constructor(messageRepository, dispatcher, mediationRecipientService) {
        this.messageRepository = messageRepository;
        this.dispatcher = dispatcher;
        this.mediationRecipientService = mediationRecipientService;
        this.registerHandlers();
    }
    async processStatusRequest(messageContext) {
        // Assert ready connection
        const connection = messageContext.assertReadyConnection();
        if (messageContext.message.recipientKey) {
            throw new error_1.AriesFrameworkError('recipient_key parameter not supported');
        }
        const statusMessage = new messages_1.StatusMessage({
            threadId: messageContext.message.threadId,
            messageCount: await this.messageRepository.getAvailableMessageCount(connection.id),
        });
        return helpers_1.createOutboundMessage(connection, statusMessage);
    }
    async queueMessage(connectionId, message) {
        await this.messageRepository.add(connectionId, message);
    }
    async processDeliveryRequest(messageContext) {
        // Assert ready connection
        const connection = messageContext.assertReadyConnection();
        if (messageContext.message.recipientKey) {
            throw new error_1.AriesFrameworkError('recipient_key parameter not supported');
        }
        const { message } = messageContext;
        // Get available messages from queue, but don't delete them
        const messages = await this.messageRepository.takeFromQueue(connection.id, message.limit, true);
        // TODO: each message should be stored with an id. to be able to conform to the id property
        // of delivery message
        const attachments = messages.map((msg) => new Attachment_1.Attachment({
            data: {
                json: msg,
            },
        }));
        const outboundMessage = messages.length > 0
            ? new messages_1.MessageDeliveryMessage({
                threadId: messageContext.message.threadId,
                attachments,
            })
            : new messages_1.StatusMessage({
                threadId: messageContext.message.threadId,
                messageCount: 0,
            });
        return helpers_1.createOutboundMessage(connection, outboundMessage);
    }
    async processMessagesReceived(messageContext) {
        // Assert ready connection
        const connection = messageContext.assertReadyConnection();
        const { message } = messageContext;
        // TODO: Add Queued Message ID
        await this.messageRepository.takeFromQueue(connection.id, message.messageIdList ? message.messageIdList.length : undefined);
        const statusMessage = new messages_1.StatusMessage({
            threadId: messageContext.message.threadId,
            messageCount: await this.messageRepository.getAvailableMessageCount(connection.id),
        });
        return helpers_1.createOutboundMessage(connection, statusMessage);
    }
    registerHandlers() {
        this.dispatcher.registerHandler(new handlers_1.StatusRequestHandler(this));
        this.dispatcher.registerHandler(new handlers_1.DeliveryRequestHandler(this));
        this.dispatcher.registerHandler(new handlers_1.MessagesReceivedHandler(this));
        this.dispatcher.registerHandler(new handlers_1.StatusHandler(this.mediationRecipientService));
        this.dispatcher.registerHandler(new handlers_1.MessageDeliveryHandler(this.mediationRecipientService));
    }
};
V2MessagePickupService = __decorate([
    plugins_1.injectable(),
    __param(0, plugins_1.inject(constants_1.InjectionSymbols.MessageRepository)),
    __metadata("design:paramtypes", [Object, Dispatcher_1.Dispatcher,
        services_1.MediationRecipientService])
], V2MessagePickupService);
exports.V2MessagePickupService = V2MessagePickupService;
//# sourceMappingURL=V2MessagePickupService.js.map